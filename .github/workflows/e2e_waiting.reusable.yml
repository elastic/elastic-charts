#########################################################################################################
# This is a reusable workflow to share common jobs between workflows.
# See https://docs.github.com/en/actions/using-workflows/reusing-workflows
# Check e2e deployment status for waiting and updates commit status
#########################################################################################################

name: Reusable e2e waiting check

env:
  NODE_VERSION: '16.13.2' # should match version in .nvmrc

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
        description: Commit sha of current ref.
      current_run_url:
        required: true
        type: string
        description: Url of current workflow run, used as status target_url.
      environment:
        required: true
        type: string
        description: Current deployment environment.
      status_context:
        required: false
        type: string
        default: Playwright e2e
        description: Context used to set commit status.

jobs:
  deployment-status:
    name: Deployment status
    runs-on: ubuntu-latest
    steps:
    - name: Print github context
      shell: python
      run: |
        print("""${{ toJSON(github) }}""")
    - name: Get latest deployments
      id: deployments
      uses: octokit/graphql-action@v2.x
      with:
        # rest api does not provide status and graphql cannot lookup by id :(
        query: |
          query ($owner: String!, $repo: String!) {
            repository(owner: $owner, name: $repo) {
              deployments(
                first: 10
                environments: ["${{ inputs.environment }}"]
                orderBy: { field: CREATED_AT, direction: DESC }
              ) {
                nodes {
                  databaseId
                  state
                  latestStatus {
                    state
                  }
                }
              }
            }
          }
        owner: ${{ github.event.repository.owner.login }}
        repo: ${{ github.event.repository.name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Print response
      shell: python
      run: |
        print("""${{ steps.deployments.outputs.data }}""")
    - name: Check for waiting deployment status
      id: waiting-check
      uses: actions/github-script@v5
      with:
        script: | # This is javascript :)
          const [deployment] = ${{ toJSON(fromJSON(steps.deployments.outputs.data).repository.deployments.nodes) }};

          console.log(deployment);

          return deployment && deployment.state === 'WAITING';
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Print ouputs
      shell: python
      run: |
        print("${{ steps.waiting-check.outputs.result }}")

#########################################################################################################

    - name: Set commit status on waiting deployment
      if: ${{ fromJSON(steps.waiting-check.outputs.result) }}
      uses: octokit/request-action@v2.x
      with:
        # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
        route: POST /repos/{repo}/statuses/{sha}
        repo: ${{ github.repository }}
        sha: ${{ inputs.sha }}
        context: ${{ inputs.status_context }}
        state: 'pending'
        description: "Deployment awaiting approval."
        target_url: ${{ inputs.current_run_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#########################################################################################################
