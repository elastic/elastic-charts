#########################################################################################################
# Handles running playwright tests when deployment is complete
#########################################################################################################

name: e2e Tests

env:
  NODE_VERSION: '16.13.2' # should match version in .nvmrc

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
        description: Checkout sha of current ref.
      commit_sha:
        required: true
        type: string
        description: Commit sha of current ref for status checks
      environment_url:
        required: true
        type: string
        description: Url of current deployment environment. (i.e. firebase or gh-pages)
      current_run_url:
        required: true
        type: string
        description: Url of current workflow run, used as status target_url.
      status_context:
        required: true
        type: string
        description: Context used to set commit status.
      environment:
        required: true
        type: string
        description: Current deployment environment.

jobs:
  deployment-status:
    name: Deployment status
    runs-on: ubuntu-latest
    steps:
    - name: Get latest deployments
      id: deployments
      uses: octokit/graphql-action@v2.x
      with:
        # rest api does not provide status and graphql cannot lookup by id :(
        query: |
          query ($owner: String!, $repo: String!) {
            repository(owner: $owner, name: $repo) {
              deployments(
                first: 10
                environments: ["${{ inputs.environment }}"]
                orderBy: { field: CREATED_AT, direction: DESC }
              ) {
                nodes {
                  databaseId
                  state
                  latestStatus {
                    state
                  }
                }
              }
            }
          }
        owner: ${{ github.event.repository.owner.login }}
        repo: ${{ github.event.repository.name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Print response
      shell: python
      run: |
        print("""${{ steps.deployments.outputs.data }}""")
    - name: Get deployment status
      id: deployment-status
      uses: actions/github-script@v5
      with:
        result-encoding: string
        script: | # This is javascript :)
          // Pick latest deployment, should always be the correct one
          const [deployment] = ${{ toJSON(fromJSON(steps.deployments.outputs.data).repository.deployments.nodes) }};

          console.log(deployment)

          if (deployment) {
            const { state, latestStatus } = deployment;
            if (state === 'ACTIVE' && latestStatus.state === 'SUCCESS') return 'success'
            if (['ERROR', 'FAILURE'].includes(latestStatus.state)) return latestStatus.state.toLowerCase();
            return 'pending';
          }
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Printdeployment status
      if: ${{ always() }}
      shell: python
      run: |
        print("""${{ steps.deployment-status.outputs.result }}""")

#########################################################################################################

    - name: Handle no deployment
      if: ${{ !steps.deployment-status.outputs.result }}
      uses: octokit/request-action@v2.x
      with:
        # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
        route: POST /repos/{repo}/statuses/{sha}
        repo: ${{ github.repository }}
        sha: ${{ inputs.sha }}
        context: ${{ inputs.status_context }}
        state: 'error'
        description: 'No deployment found, testing aborted.'
        target_url: ${{ inputs.current_run_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Handle successful deployment
      if: ${{ steps.deployment-status.outputs.result == 'success' }}
      uses: octokit/request-action@v2.x
      with:
        # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
        route: POST /repos/{repo}/statuses/{sha}
        repo: ${{ github.repository }}
        sha: ${{ inputs.sha }}
        context: ${{ inputs.status_context }}
        state: 'pending'
        description: 'Deployment successful, starting tests'
        target_url: ${{ inputs.current_run_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Handle deployment error or failure
      if: ${{ steps.deployment-status.outputs.result == 'error' || steps.deployment-status.outputs.result == 'failure' }}
      uses: octokit/request-action@v2.x
      with:
        # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
        route: POST /repos/{repo}/statuses/{sha}
        repo: ${{ github.repository }}
        sha: ${{ inputs.sha }}
        context: ${{ inputs.status_context }}
        state: ${{ steps.deployment-status.outputs.result }}
        description: "Deployment ${{ steps.deployment-status.outputs.result }}, testing aborted."
        target_url: ${{ inputs.current_run_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Handle pending deployment # To catch edge case, should never be pending a deployment
      if: ${{ steps.deployment-status.outputs.result == 'pending' }}
      uses: octokit/request-action@v2.x
      with:
        # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
        route: POST /repos/{repo}/statuses/{sha}
        repo: ${{ github.repository }}
        sha: ${{ inputs.sha }}
        context: ${{ inputs.status_context }}
        state: error
        description: "Deployment pending, testing aborted."
        target_url: ${{ inputs.current_run_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Fail check run if deployment was not successful
      if: ${{ steps.deployment-status.outputs.result != 'success' }}
      uses: actions/github-script@v3
      with:
        script: core.setFailed("Testing aborted due to ${{ steps.deployment-status.outputs.result || 'missing' }} deployment.")

#########################################################################################################

  deployment-ping:
    name: Ping server
    if: ${{ success() }}
    runs-on: ubuntu-latest
    needs: deployment-status
    steps:
      - name: Check the deployed e2e server URL
        uses: jtalk/url-health-check-action@v2
        with:
          url: ${{ inputs.environment_url }}
          max-attempts: 3
          retry-delay: 2s
      - name: Set commit status
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ inputs.sha }}
          context: ${{ inputs.status_context }}
          state: error
          description: 'Deployment unresponsive, testing aborted.'
          target_url: ${{ inputs.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fail check run if deployment unresponsive
        if: ${{ failure() }}
        uses: actions/github-script@v3
        with:
          script: core.setFailed("Deployment unresponsive, check environment url.")
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#########################################################################################################
#########################################################################################################
#########################################################################################################

  e2e-setup:
    name: e2e Setup
    runs-on: ubuntu-latest
    needs: [deployment-status, deployment-ping]
    if: ${{ success() }}
    outputs:
      groups: ${{ steps.groups.outputs.result }}
      playwright-version: ${{ steps.playwright.outputs.version }}
    steps: # TODO: cleanup this logic without python and shell scripts
      - name: Checkout & Setup node
        uses: nickofthyme/checkout-node-setup@v1
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.sha }}
          skip-npm-install: true # not required here
      - name: Get Playwright version
        id: playwright
        working-directory: e2e
        run: |
          regex="@playwright/test@(.+)"
          result="$(yarn list --pattern "@playwright/test" --depth=0 | grep playwright/test)"
          if [[ $result =~ $regex ]]
          then
            echo "::set-output name=version::${BASH_REMATCH[1]}"
          else
            echo "Unable to find '@playwright/test' version"
            exit 1
          fi
      - name: Print version
        run: echo "${{ steps.playwright.outputs.version }}"
      # TODO run this when all screenshots in e2e/ are updated in master
      # - name: Regroup e2e test suites
      #   working-directory: e2e
      #   run: yarn regroup
      - name: Get e2e matrix test groups
        id: groups
        uses: actions/github-script@v5
        with:
          script: |
            data = require('./e2e/groups.json');
            if (data && data.enabled) {
              console.log('---- groups.json ----');
              console.log(JSON.stringify(data, null, 2));
              const groups = data.groups.filter(({ enabled }) => enabled);
              if (groups.length > 0) {
                console.log('---- groups ----');
                console.log(JSON.stringify(groups, null, 2));
                return groups;
              }
            }
      - name: Print groups context
        shell: python
        run: |
          print("""${{ steps.groups.outputs.result }}""")

  e2e:
    name: '${{ matrix.browser }} / Test group #${{ matrix.group.id }}'
    runs-on: ubuntu-latest
    needs: e2e-setup
    if: ${{ needs.e2e-setup.outputs.groups }}
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJSON(needs.e2e-setup.outputs.groups) }}
        browser: [Chrome]
    container:
      image: mcr.microsoft.com/playwright:v${{ needs.e2e-setup.outputs.playwright-version }}-focal
    steps:
      - name: Checkout & Setup node
        uses: nickofthyme/checkout-node-setup@v1
        with:
          ref: ${{ inputs.sha }}
          skip-npm-install: true # This fails in this github context
      - name: Print group info
        shell: python
        run: |
          print("""${{ toJSON(matrix) }}""")
      - run: yarn install --frozen-lockfile # TODO: fix e2e-server independence
        if: ${{ contains(matrix.group.testString, 'all.test.ts') }}
      - run: yarn test:e2e:generate # TODO: fix e2e-server independence
        if: ${{ contains(matrix.group.testString, 'all.test.ts') }}
      - run: yarn install --frozen-lockfile # TODO: fix caching
        working-directory: e2e
      - name: Test run
        working-directory: e2e
        env:
          ENV_URL: ${{ inputs.environment_url }}/e2e
        run: yarn test:playwright --forbid-only --project=${{ matrix.browser }} ${{ matrix.group.args }}

  e2e-status-success:
    name: set success Status
    if: ${{ success() }}
    needs: e2e
    runs-on: ubuntu-latest
    env:
      current_run_url: "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
    steps:
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(needs) }}""")
      - name: Set success status
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ inputs.commit_sha }}
          context: ${{ env.status_context }}
          state: 'success'
          description: 'All tests passed!' # TODO add number of tests
          target_url: ${{ env.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-status-failure:
    name: Set failure status
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Set failure status
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ inputs.commit_sha }}
          context: ${{ env.status_context }}
          state: 'failure'
          description: 'Some tests failed' # TODO add number of tests
          target_url: ${{ env.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-status-cancel:
    name: Set cancelled status
    if: ${{ cancelled() }}
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Set cancelled status
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ inputs.commit_sha }}
          context: ${{ env.status_context }}
          state: 'failure'
          description: 'Tests were cancelled'
          target_url: ${{ env.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#########################################################################################################

  failure-check:
    name: Print context on failure
    # if: ${{ failure() }} # TODO this
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [deployment-status, e2e-setup, e2e]
    steps:
      - name: Print github context
        shell: python
        run: |
          print("""${{ toJSON(github) }}""")
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(inputs) }}""")
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(needs) }}""")

#########################################################################################################
