name: Test Playwright

concurrency:
  group: '${{ github.workflow }} - ${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  NODE_VERSION: '16.13.2' # should match version in .nvmrc

permissions:
  deployments: write

on:
  pull_request_target:
    branches:
      - master

jobs:
  deploy-test:
    # Don't think this is needed but was provided by firebase
    # if: '${{ github.event.pull_request.head.repo.full_name == github.repository }}'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repoooo
        uses: actions/checkout@v2
      - name: Print event
        shell: python
        run: |
          print("""${{ toJSON(github.event) }}""")
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          # https://docs.github.com/en/rest/reference/deployments#create-a-deployment
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ github.sha }}
          auto_merge: true # merge with default branch
          required_contexts: '[]'
          environment: dev
          description: "Deployment for PR #${{ github.event.pull_request.number }}"
          payload: |
            {
              "key": "value",
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: "echo latest release: ${{ steps.get_latest_release.outputs.data }}"
      # - run: echo "github.event.pull_request.head.repo.full_name - ${{ github.event.pull_request.head.repo.full_name }}"
      # - run: echo "github.repository - ${{ github.repository }}"
      # - run: echo "test - ${{ github.event.pull_request.head.repo.full_name == github.repository }}"
      # - name: Deploy build to firebase
      #   id: deploy
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     expires: 14d # this updates for every deploy
      #     entryPoint: 'e2e-server'
      #     repoToken: '${{ secrets.GITHUB_TOKEN }}'
      #     # See https://console.cloud.google.com/iam-admin/iam?project=ech-e2e-ci
      #     firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECH_E2E_CI }}'
      #     projectId: ech-e2e-ci
      # - name: Outputs
      #   shell: python
      #   run: |
      #     print("""${{ toJSON(steps.deploy.outputs) }}""")

  # testing:
  #   name: Testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Testing
  #       shell: python
  #       run: |
  #         print("""${{ toJSON(github) }}""")

  # e2e-setup:
  #   name: e2e Setup
  #   if: github.head_ref == 'playwright'
  #   runs-on: ubuntu-latest
  #   outputs:
  #     test-files: ${{ steps.test-files.outputs.json }}
  #     playwright-version: ${{ steps.playwright.outputs.version }}
  #   steps:
  #     - name: Checkout node setup
  #       uses: nickofthyme/checkout-node-setup@v1
  #       with:
  #         skip-npm-install: true
  #     - name: Get test file paths
  #       id: test-files
  #       shell: python
  #       run: |
  #         import os, glob, json
  #         os.chdir('e2e/tests')
  #         files = glob.glob('**/*.test.ts', recursive=True)
  #         print(f"::set-output name=json::{json.dumps(files)}")
  #     - name: Get Playwright version
  #       id: playwright
  #       run: |
  #         regex="@playwright/test@(.+)"
  #         result="$(cd e2e && yarn list --pattern "@playwright/test" --depth=0 | grep playwright/test)"
  #         if [[ $result =~ $regex ]]
  #         then
  #           echo "::set-output name=version::${BASH_REMATCH[1]}"
  #         else
  #           echo "Unable to find '@playwright/test' version"
  #           exit 1
  #         fi
  #     - name: Print files
  #       run: echo "${{ steps.test-files.outputs.json }}"
  #     - name: Print version
  #       run: echo "${{ steps.playwright.outputs.version }}"

  # e2e:
  #   name: 'e2e Test / ${{ matrix.test-file }} / ${{ matrix.browser }}'
  #   if: ${{ needs.e2e-setup.result == 'success' && github.head_ref == 'playwright' }}
  #   runs-on: ubuntu-latest
  #   needs: e2e-setup
  #   strategy:
  #     fail-fast: false
  #     max-parallel: 10 # tbd
  #     matrix:
  #       test-file: ${{ fromJSON(needs.e2e-setup.outputs.test-files) }}
  #       browser: ['Chrome']
  #       # browser: ['chrome', 'Safari', 'Firefox']
  #   container:
  #     image: mcr.microsoft.com/playwright:v${{ needs.e2e-setup.outputs.playwright-version }}-focal
  #   steps:
  #     - name: Checkout node setup
  #       uses: nickofthyme/checkout-node-setup@v1
  #       with:
  #         working-directory: e2e
  #     - name: Test run
  #       working-directory: e2e
  #       run: yarn test --project=${{ matrix.browser }} ./tests/${{ matrix.test-file }}

  # # I don't know of better way to check the status of all the parallel e2e checks.
  # # The issue is that we need a constant status check if we are to add it as a
  # # required branch protection rule.
  # e2e-status:
  #   name: e2e Status
  #   if: ${{ always() && github.head_ref == 'playwright' }}
  #   runs-on: ubuntu-latest
  #   needs: e2e
  #   steps:
  #     - name: Print needs context
  #       shell: python
  #       run: |
  #         print("""${{ toJSON(needs.e2e) }}""")
  #     - name: Check e2e failure
  #       if: ${{ needs.e2e.result != 'success' }}
  #       uses: actions/github-script@v3
  #       with:
  #         script: core.setFailed('One or more e2e test failed. See e2e Test runs.')

