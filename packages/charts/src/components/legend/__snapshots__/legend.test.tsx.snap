// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Legend #legendColorPicker should match snapshot after onChange is called 1`] = `
"<LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splita\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"#0c7b93\\" seriesName=\\"splita\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"#0c7b93\\" aria-label=\\"Change series color, currently #0c7b93\\">
          <DotIcon className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splita\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splita\\" onClick={[Function (anonymous)]} aria-label=\\"splita; Activate to hide series in graph\\">
        splita
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitb\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"#0c7b93\\" seriesName=\\"splitb\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"#0c7b93\\" aria-label=\\"Change series color, currently #0c7b93\\">
          <DotIcon className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitb\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitb\\" onClick={[Function (anonymous)]} aria-label=\\"splitb; Activate to hide series in graph\\">
        splitb
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitc\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"#0c7b93\\" seriesName=\\"splitc\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"#0c7b93\\" aria-label=\\"Change series color, currently #0c7b93\\">
          <DotIcon className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitc\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitc\\" onClick={[Function (anonymous)]} aria-label=\\"splitc; Activate to hide series in graph\\">
        splitc
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitd\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"#0c7b93\\" seriesName=\\"splitd\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"#0c7b93\\" aria-label=\\"Change series color, currently #0c7b93\\">
          <DotIcon className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"#0c7b93\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently #0c7b93\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitd\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitd\\" onClick={[Function (anonymous)]} aria-label=\\"splitd; Activate to hide series in graph\\">
        splitd
      </button>
    </Label>
  </li>
</LegendItem>"
`;

exports[`Legend #legendColorPicker should match snapshot after onClose is called 1`] = `
"<LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splita\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splita\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splita\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splita\\" onClick={[Function (anonymous)]} aria-label=\\"splita; Activate to hide series in graph\\">
        splita
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitb\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitb\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitb\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitb\\" onClick={[Function (anonymous)]} aria-label=\\"splitb; Activate to hide series in graph\\">
        splitb
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitc\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitc\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitc\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitc\\" onClick={[Function (anonymous)]} aria-label=\\"splitc; Activate to hide series in graph\\">
        splitc
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitd\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitd\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitd\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitd\\" onClick={[Function (anonymous)]} aria-label=\\"splitd; Activate to hide series in graph\\">
        splitd
      </button>
    </Label>
  </li>
</LegendItem>"
`;

exports[`Legend #legendColorPicker should render colorPicker when color is clicked 1`] = `
"<div id=\\"colorPicker\\">
  <span>
    Custom Color Picker
  </span>
  <button id=\\"change\\" type=\\"button\\" onClick={[Function: onClick]}>
    #0c7b93
  </button>
  <button id=\\"close\\" type=\\"button\\" onClick={[Function: handleClose]}>
    close
  </button>
</div>"
`;

exports[`Legend #legendColorPicker should render colorPicker when color is clicked 2`] = `
"<LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splita\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splita\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splita\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splita\\" onClick={[Function (anonymous)]} aria-label=\\"splita; Activate to hide series in graph\\">
        splita
      </button>
    </Label>
  </li>
  <Component anchor={{...}} color=\\"red\\" onClose={[Function: handleClose]} onChange={[Function: handleChange]} seriesIdentifiers={{...}}>
    <div id=\\"colorPicker\\">
      <span>
        Custom Color Picker
      </span>
      <button id=\\"change\\" type=\\"button\\" onClick={[Function: onClick]}>
        #0c7b93
      </button>
      <button id=\\"close\\" type=\\"button\\" onClick={[Function: handleClose]}>
        close
      </button>
    </div>
  </Component>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitb\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitb\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitb\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitb\\" onClick={[Function (anonymous)]} aria-label=\\"splitb; Activate to hide series in graph\\">
        splitb
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitc\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitc\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitc\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitc\\" onClick={[Function (anonymous)]} aria-label=\\"splitc; Activate to hide series in graph\\">
        splitc
      </button>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} totalItems={4} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]}>
  <li className=\\"echLegendItem echLegendItem--vertical\\" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} data-ech-series-name=\\"splitd\\">
    <div className=\\"background\\" />
    <ForwardRef color=\\"red\\" seriesName=\\"splitd\\" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]}>
      <button type=\\"button\\" onClick={[Function (anonymous)]} className=\\"echLegendItem__color echLegendItem__color--changable\\" title=\\"change series color\\">
        <Icon type=\\"dot\\" color=\\"red\\" aria-label=\\"Change series color, currently red\\">
          <DotIcon className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
            <svg width={16} height={16} viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\" className=\\"echIcon\\" color=\\"red\\" tabIndex={[undefined]} focusable=\\"false\\" aria-label=\\"Change series color, currently red\\">
              <circle cx={8} cy={8} r={4} />
            </svg>
          </DotIcon>
        </Icon>
      </button>
    </ForwardRef>
    <Label label=\\"splitd\\" isToggleable={true} onClick={[Function (anonymous)]} isSeriesHidden={false}>
      <button type=\\"button\\" className=\\"echLegendItem__label echLegendItem__label--clickable\\" title=\\"splitd\\" onClick={[Function (anonymous)]} aria-label=\\"splitd; Activate to hide series in graph\\">
        splitd
      </button>
    </Label>
  </li>
</LegendItem>"
`;
