// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Legend #legendColorPicker should match snapshot after onChange is called 1`] = `
"<LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splita">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="#0c7b93" seriesName="splita" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="#0c7b93" ariaLabel="Change series color, currently #0c7b93">
            <svg width={16} height={16} aria-label="Change series color, currently #0c7b93">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="#0c7b93" strokeWidth={1} fill="#0c7b93" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splita" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splita\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splita; Click: isolate series\\nSHIFT + click: hide series">
        splita
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitb">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="#0c7b93" seriesName="splitb" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="#0c7b93" ariaLabel="Change series color, currently #0c7b93">
            <svg width={16} height={16} aria-label="Change series color, currently #0c7b93">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="#0c7b93" strokeWidth={1} fill="#0c7b93" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitb" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitb\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitb; Click: isolate series\\nSHIFT + click: hide series">
        splitb
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitc">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="#0c7b93" seriesName="splitc" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="#0c7b93" ariaLabel="Change series color, currently #0c7b93">
            <svg width={16} height={16} aria-label="Change series color, currently #0c7b93">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="#0c7b93" strokeWidth={1} fill="#0c7b93" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitc" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitc\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitc; Click: isolate series\\nSHIFT + click: hide series">
        splitc
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitd">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="#0c7b93" seriesName="splitd" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="#0c7b93" ariaLabel="Change series color, currently #0c7b93">
            <svg width={16} height={16} aria-label="Change series color, currently #0c7b93">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="#0c7b93" strokeWidth={1} fill="#0c7b93" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitd" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitd\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitd; Click: isolate series\\nSHIFT + click: hide series">
        splitd
      </div>
    </Label>
  </li>
</LegendItem>"
`;

exports[`Legend #legendColorPicker should match snapshot after onClose is called 1`] = `
"<LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splita">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splita" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splita" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splita\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splita; Click: isolate series\\nSHIFT + click: hide series">
        splita
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitb">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitb" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitb" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitb\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitb; Click: isolate series\\nSHIFT + click: hide series">
        splitb
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitc">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitc" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitc" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitc\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitc; Click: isolate series\\nSHIFT + click: hide series">
        splitc
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitd">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitd" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitd" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitd\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitd; Click: isolate series\\nSHIFT + click: hide series">
        splitd
      </div>
    </Label>
  </li>
</LegendItem>"
`;

exports[`Legend #legendColorPicker should render colorPicker when color is clicked 1`] = `
"<div id="colorPicker">
  <span>
    Custom Color Picker
  </span>
  <button id="change" type="button" onClick={[Function: onClick]}>
    #0c7b93
  </button>
  <button id="close" type="button" onClick={[Function: handleClose]}>
    close
  </button>
</div>"
`;

exports[`Legend #legendColorPicker should render colorPicker when color is clicked 2`] = `
"<LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splita">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splita" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splita" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splita\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splita; Click: isolate series\\nSHIFT + click: hide series">
        splita
      </div>
    </Label>
  </li>
  <Component anchor={{...}} color="red" onClose={[Function: handleClose]} onChange={[Function: handleChange]} seriesIdentifiers={{...}}>
    <div id="colorPicker">
      <span>
        Custom Color Picker
      </span>
      <button id="change" type="button" onClick={[Function: onClick]}>
        #0c7b93
      </button>
      <button id="close" type="button" onClick={[Function: handleClose]}>
        close
      </button>
    </div>
  </Component>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitb">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitb" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitb" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitb\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitb; Click: isolate series\\nSHIFT + click: hide series">
        splitb
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitc">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitc" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitc" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitc\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitc; Click: isolate series\\nSHIFT + click: hide series">
        splitc
      </div>
    </Label>
  </li>
</LegendItem><LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={4} extraValues={{...}} legendValues={{...}} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: { calls: [], contexts: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], withImplementation: [Function: bound withImplementation], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[Function (anonymous)]} action={[undefined]} labelOptions={{...}} flatLegend={false}>
  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={{...}} dir="ltr" data-ech-series-name="splitd">
    <div className="background" />
    <div className="colorWrapper">
      <ForwardRef color="red" seriesName="splitd" isSeriesHidden={false} hasColorPicker={true} onClick={[Function (anonymous)]} pointStyle={[undefined]}>
        <button type="button" onClick={[Function (anonymous)]} className="echLegendItem__color echLegendItem__color--changable" title="change series color">
          <LegendIcon pointStyle={[undefined]} color="red" ariaLabel="Change series color, currently red">
            <svg width={16} height={16} aria-label="Change series color, currently red">
              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="red" strokeWidth={1} fill="red" opacity={1} />
              </g>
            </svg>
          </LegendIcon>
        </button>
      </ForwardRef>
    </div>
    <Label label="splitd" options={{...}} isToggleable={true} onToggle={[Function (anonymous)]} isSeriesHidden={false}>
      <div role="button" tabIndex={0} dir="ltr" className="echLegendItem__label echLegendItem__label--clickable echLegendItem__label--singleline" title="splitd\\nClick: isolate series\\nSHIFT + click: hide series" onClick={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} aria-pressed={false} style={{...}} aria-label="splitd; Click: isolate series\\nSHIFT + click: hide series">
        splitd
      </div>
    </Label>
  </li>
</LegendItem>"
`;
