// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Chart should render the legend name test 1`] = `
"<Chart size={{...}} id="chart1" renderer="canvas">
  <Provider store={{...}}>
    <div className="echChart" style={{...}}>
      <Connect(ChartBackground)>
        <ChartBackground backgroundColor="transparent" dispatch={[Function: dispatch]}>
          <div className="echChartBackground" style={{...}} />
        </ChartBackground>
      </Connect(ChartBackground)>
      <Connect(ChartStatusComponent)>
        <ChartStatusComponent chartId="chart1" rendered={true} renderedCount={1} onRenderChange={[undefined]} debugState={{...}} dispatch={[Function: dispatch]}>
          <div className="echChartStatus" data-ech-render-complete={true} data-ech-render-count={1} data-ech-debug-state={{...}} />
        </ChartStatusComponent>
      </Connect(ChartStatusComponent)>
      <Connect(Resizer)>
        <Resizer resizeDebounce={10} updateParentDimensions={[Function (anonymous)]}>
          <div className="echChartResizer" />
        </Resizer>
      </Connect(Resizer)>
      <Connect(LegendComponent)>
        <LegendComponent debug={true} isBrushing={false} chartDimensions={{...}} containerDimensions={{...}} chartTheme={{...}} size={{...}} items={{...}} extraValues={{...}} config={{...}} onToggleDeselectSeriesAction={[Function (anonymous)]} onItemOutAction={[Function (anonymous)]} onItemOverAction={[Function (anonymous)]} clearTemporaryColors={[Function (anonymous)]} setTemporaryColor={[Function (anonymous)]} setPersistedColor={[Function (anonymous)]}>
          <div className="echLegend echLegend--debug echLegend--vertical echLegend--right echLegend--top" style={{...}} dir="ltr">
            <div style={{...}} className="echLegendListContainer">
              <ul style={{...}} className="echLegendList">
                <LegendItem item={{...}} positionConfig={{...}} isMostlyRTL={false} totalItems={1} extraValues={{...}} showExtra={false} onMouseOut={[undefined]} onMouseOver={[undefined]} onClick={[undefined]} clearTemporaryColorsAction={[Function (anonymous)]} setPersistedColorAction={[Function (anonymous)]} setTemporaryColorAction={[Function (anonymous)]} mouseOutAction={[Function (anonymous)]} mouseOverAction={[Function (anonymous)]} toggleDeselectSeriesAction={[Function (anonymous)]} colorPicker={[undefined]} action={[undefined]} labelOptions={{...}}>
                  <li className="echLegendItem echLegendItem--vertical" onMouseEnter={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} style={[undefined]} dir="ltr" data-ech-series-name="test">
                    <div className="background" />
                    <div className="colorWrapper">
                      <ForwardRef color="#54B399" seriesName="test" isSeriesHidden={false} hasColorPicker={false} onClick={[undefined]} pointStyle={[undefined]}>
                        <div className="echLegendItem__color" title="series color">
                          <LegendIcon pointStyle={[undefined]} color="#54B399" ariaLabel="series color: #54B399">
                            <svg width={16} height={16} aria-label="series color: #54B399">
                              <g transform="\\n          translate(8, 8)\\n          rotate(0)\\n        ">
                                <path d="M -3.5 0 a 3.5,3.5 0 1,0 7,0 a 3.5,3.5 0 1,0 -7,0" stroke="#54B399" strokeWidth={1} fill="#54B399" opacity={1} />
                              </g>
                            </svg>
                          </LegendIcon>
                        </div>
                      </ForwardRef>
                    </div>
                    <Label label="test" options={{...}} isToggleable={false} onToggle={[undefined]} isSeriesHidden={false}>
                      <div dir="ltr" className="echLegendItem__label echLegendItem__label--singleline" title="test" style={{...}}>
                        test
                      </div>
                    </Label>
                  </li>
                </LegendItem>
              </ul>
            </div>
          </div>
        </LegendComponent>
      </Connect(LegendComponent)>
      <ErrorBoundary>
        <Connect(SpecsParserComponent)>
          <SpecsParserComponent specParsed={[Function (anonymous)]} specUnmounted={[Function (anonymous)]}>
            <Settings debug={true} rendering="svg" showLegend={true} />
            <BarSeries id="test" data={{...}} xAccessor="x" yAccessors={{...}} />
          </SpecsParserComponent>
        </Connect(SpecsParserComponent)>
        <div className="echContainer">
          <Connect(ChartContainer) getChartContainerRef={[Function (anonymous)]} forwardStageRef={{...}}>
            <ChartContainer getChartContainerRef={[Function (anonymous)]} forwardStageRef={{...}} status="Initialized" initialized={true} tooltipState={{...}} isChartEmpty={false} canPinTooltip={false} pointerCursor={[undefined]} isBrushingAvailable={false} isBrushing={false} internalChartRenderer={[Function (anonymous)]} settings={{...}} tooltip={{...}} disableInteractions={false} onPointerMove={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onKeyPress={[Function (anonymous)]} pinTooltip={[Function (anonymous)]}>
              <div className="echChartPointerContainer" style={{...}} onMouseMove={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onContextMenu={[undefined]}>
                <Connect(CursorBand)>
                  <CursorBand isBrushing={false} theme={{...}} chartRotation={0} cursorPosition={[undefined]} tooltipType="vertical" fromExternalEvent={[undefined]} tooltipState={{...}} dispatch={[Function: dispatch]} />
                </Connect(CursorBand)>
                <Connect(XYChart) forwardCanvasRef={{...}}>
                  <XYChart forwardCanvasRef={{...}} isRTL={false} initialized={true} isChartEmpty={false} debug={true} geometries={{...}} geometriesIndex={{...}} theme={{...}} chartContainerDimensions={{...}} highlightedLegendItem={[undefined]} hoveredAnnotationIds={{...}} rotation={0} renderingArea={{...}} chartTransform={{...}} axesSpecs={{...}} perPanelAxisGeoms={{...}} perPanelGridLines={{...}} axesStyles={{...}} annotationDimensions={{...}} annotationSpecs={{...}} panelGeoms={{...}} a11ySettings={{...}} onChartRendered={[Function (anonymous)]}>
                    <figure aria-labelledby={[undefined]} aria-describedby="chart1--defaultSummary">
                      <canvas dir="ltr" className="echCanvasRenderer" width={170} height={200} style={{...}} role="presentation" />
                    </figure>
                    <Connect(ScreenReaderSummaryComponent)>
                      <ScreenReaderSummaryComponent chartTypeDescription="bar chart" a11ySettings={{...}} goalChartData={{...}} goalChartLabels={{...}} dispatch={[Function: dispatch]}>
                        <div className="echScreenReaderOnly">
                          <ScreenReaderLabel label={[undefined]} labelId={[undefined]} labelHeadingLevel="p" description={[undefined]} descriptionId="chart1--defaultSummary" defaultSummaryId="chart1--defaultSummary" tableCaption={[undefined]} goalChartLabels={{...}} />
                          <ScreenReaderDescription label={[undefined]} labelId={[undefined]} labelHeadingLevel="p" description={[undefined]} descriptionId="chart1--defaultSummary" defaultSummaryId="chart1--defaultSummary" tableCaption={[undefined]} />
                          <ScreenReaderTypes label={[undefined]} labelId={[undefined]} labelHeadingLevel="p" description={[undefined]} descriptionId="chart1--defaultSummary" defaultSummaryId="chart1--defaultSummary" tableCaption={[undefined]} chartTypeDescription="bar chart" goalChartData={{...}}>
                            <dl>
                              <dt>
                                Chart type:
                              </dt>
                              <dd id="chart1--defaultSummary">
                                bar chart
                              </dd>
                            </dl>
                          </ScreenReaderTypes>
                        </div>
                      </ScreenReaderSummaryComponent>
                    </Connect(ScreenReaderSummaryComponent)>
                  </XYChart>
                </Connect(XYChart)>
                <Connect(CursorLine)>
                  <CursorLine isBrushing={false} theme={{...}} chartRotation={0} cursorPosition={[undefined]} tooltipType="vertical" fromExternalEvent={[undefined]} isLine={false} tooltipState={{...}} dispatch={[Function: dispatch]} />
                </Connect(CursorLine)>
                <Connect(CursorCrossLine)>
                  <CursorCrossLine theme={{...}} chartRotation={0} cursorCrossLinePosition={[undefined]} tooltipType="vertical" dispatch={[Function: dispatch]} />
                </Connect(CursorCrossLine)>
                <Connect(Tooltip) getChartContainerRef={[Function (anonymous)]}>
                  <Tooltip getChartContainerRef={[Function (anonymous)]} tooltip={{...}} isExternal={false} isBrushing={false} zIndex={0} settings={{...}} tooltipTheme={{...}} rotation={0} chartId="chart1" backgroundColor="transparent" visible={false} position={{...}} info={{...}} pinned={false} selected={{...}} canPinTooltip={false} onPointerMove={[Function (anonymous)]} toggleSelectedTooltipItem={[Function (anonymous)]} setSelectedTooltipItems={[Function (anonymous)]} pinTooltip={[Function (anonymous)]} />
                </Connect(Tooltip)>
                <Connect(Annotations) getChartContainerRef={[Function (anonymous)]} chartAreaRef={{...}}>
                  <Annotations getChartContainerRef={[Function (anonymous)]} chartAreaRef={{...}} isChartEmpty={false} chartDimensions={{...}} sharedStyle={{...}} annotationDimensions={{...}} annotationSpecs={{...}} tooltipState={{...}} chartId="chart1" zIndex={0} hoveredAnnotationIds={{...}} clickable={false} onPointerMove={[Function (anonymous)]} onDOMElementLeave={[Function (anonymous)]} onDOMElementEnter={[Function (anonymous)]} onDOMElementClick={[Function (anonymous)]}>
                    <AnnotationTooltip chartId="chart1" zIndex={0} state={{...}} chartRef={{...}} onScroll={[Function (anonymous)]} />
                  </Annotations>
                </Connect(Annotations)>
                <Connect(Highlighter)>
                  <Highlighter initialized={true} chartId="chart1" zIndex={0} isBrushing={false} highlightedGeometries={{...}} chartTransform={{...}} chartDimensions={{...}} chartRotation={0} dispatch={[Function: dispatch]}>
                    <svg className="echHighlighter" style={{...}}>
                      <defs>
                        <clipPath id="echHighlighterClipPath__chart1">
                          <rect x="0" y="0" width={150} height={180} />
                        </clipPath>
                      </defs>
                    </svg>
                  </Highlighter>
                </Connect(Highlighter)>
                <Connect(BrushTool)>
                  <BrushTool initialized={true} projectionContainer={{...}} mainProjectionArea={{...}} isBrushAvailable={false} isBrushing={false} brushEvent={{...}} zIndex={0} dispatch={[Function: dispatch]} />
                </Connect(BrushTool)>
              </div>
            </ChartContainer>
          </Connect(ChartContainer)>
        </div>
      </ErrorBoundary>
    </div>
  </Provider>
</Chart>"
`;
